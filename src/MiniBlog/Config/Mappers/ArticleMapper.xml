<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper:根标签，namespace：命名空间，随便写，一般保证命名空间唯一 -->
<mapper namespace="MiniBlog.Main.Dao.Article.ArticleDao">
    <!-- statement，内容：sql语句。id：唯一标识，随便写，在同一个命名空间下保持唯一
       resultType：sql语句查询结果集的封装类型,tb_user即为数据库中的表
     -->
    <insert id="insertNewArticle" parameterType="map" useGeneratedKeys="true" keyProperty="id" >
        insert into MB_Article(userId, title) values(#{userId}, #{title})
    </insert>

    <insert id="insertNewArticleContent" parameterType="map" useGeneratedKeys="true" keyProperty="id">
        insert into MB_ArticleDetails(articleId, content) values(#{articleId}, #{content})
    </insert>

    <insert id="insertNewImgList"  >
        insert into MB_ArticlePicture(articleId, pictureName) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{articleId}, #{item})
        </foreach>
    </insert>

    <select id="getAvailableArticleListByUserId" resultType="map" >
        SELECT a.id 'id', a.userId 'userId', a.title 'title', b.content 'content', DATE_FORMAT(a.publishTime, '%Y-%m-%d %H:%i:%s') 'publishTime', a.readNum 'readNum', a.likeAmount 'likeAmount', a.commentAmount 'commentAmount' FROM mb_article a, mb_articledetails b WHERE a.forbid = 'no' and a.userId = #{userId} and a.id = b.articleId order by a.id desc LIMIT #{firstIndex}, #{maxAmount}
    </select>

    <select id="getPictureListByArticleId" resultType="string" >
        SELECT pictureName FROM mb_articlepicture WHERE articleId = #{articleId};
    </select>

    <select id="getAmountOfAvailableArticleListByUserId" resultType="int" >
        SELECT COUNT(id) FROM mb_article WHERE userId = #{userId} AND forbid = 'no'
    </select>

    <select id="getTheLikeFlagOfTheArticle" resultType="int">
        select max(id) from mb_likerecordofarticle where articleId=#{articleId} and userId=#{userId}
    </select>

    <update id="insertNewLikeFlagOfTheArticle" >
        insert into mb_likerecordofarticle(articleId, userId) values(#{articleId}, #{userId})
    </update>

    <update id="deleteOldLikeFlagOfTheArticle" >
        DELETE FROM mb_likerecordofarticle WHERE id = #{recodeId}
    </update>

    <update id="insertNewCommentOfTheArticle" >
        <if test="userId!=null">
            insert into mb_articlecomment(articleId, parent_comment_id, userId, content) values(#{articleId}, #{parentId}, #{userId}, #{commentContent})
        </if>
        <if test="userId==null">
            insert into mb_articlecomment(articleId, parent_comment_id, content) values(#{articleId}, #{parentId}, #{commentContent})
        </if>
    </update>

    <update id="deleteCommentOfArticleById" >
        delete from mb_articlecomment where id=#{recodeId}
    </update>

    <update id="plusOneLikeAmountOfTheArticle" >
        UPDATE mb_article SET likeAmount=likeAmount+1 WHERE id=#{articleId}
    </update>

    <update id="minusOneLikeAmountOfTheArticle" >
        UPDATE mb_article SET likeAmount=likeAmount-1 WHERE id=#{articleId} and likeAmount > 0
    </update>

    <select id="getArticleDetailsByArticleId" resultType="map">
        SELECT a.id 'id', a.userId 'userId', a.title 'title', b.content 'content', DATE_FORMAT(a.publishTime, '%Y-%m-%d %H:%i:%s') 'publishTime', a.readNum 'readNum', a.likeAmount 'likeAmount', a.commentAmount 'commentAmount' FROM mb_article a, mb_articledetails b WHERE a.forbid = 'no' AND a.id = #{articleId} AND a.id=b.articleId
    </select>

    <select id="getArticleCommentByArticleId" resultType="map">
        SELECT a.id 'id', a.userId 'userId', a.content 'content', a.likeAmount 'likeAmount', b.account 'account', DATE_FORMAT(a.recordTime, '%Y-%m-%d %H:%i:%s') 'recordTime' FROM mb_user b RIGHT JOIN  mb_articlecomment a ON a.userId = b.id WHERE a.articleId = #{articleId} ORDER BY a.id DESC
    </select>

    <update id="plusOneReadAmountOfTheArticle" >
        UPDATE mb_article SET readNum = readNum + 1 WHERE id = #{articleId}
    </update>

    <delete id="deleteTheArticleByArticleId" >
        UPDATE mb_article SET forbid = 'yes' WHERE id = #{articleId}
    </delete>

    <update id="plusOneCommentAmountOfTheArticle" >
        UPDATE mb_article SET commentAmount = commentAmount + 1 WHERE id = #{articleId}
    </update>

    <update id="minusOneCommentAmountOfTheArticle" >
        UPDATE mb_article SET commentAmount = commentAmount - 1 WHERE id = #{articleId}
    </update>

    <select id="getCommentInfByCommentId" resultType="map" >
        SELECT articleId, userId, content, likeAmount, DATE_FORMAT(recordTime, '%Y-%m-%d %H:%i:%s') 'recordTime' FROM mb_articlecomment WHERE id = #{commentId}
    </select>

    <select id="getAvailableArticleList" resultType="map" >
         SELECT a.id 'articleId', a.userId 'userId', a.title 'title', b.content 'content', DATE_FORMAT(a.publishTime, '%Y-%m-%d %H:%i:%s') 'publishTime',
	          a.readNum 'readNum', a.likeAmount 'likeAmount', a.commentAmount 'commentAmount', c.account 'userAccount'
	      FROM mb_user c
		      LEFT JOIN mb_article a ON c.id = a.userId
		      LEFT JOIN mb_articledetails b ON a.id = b.articleId
	      WHERE a.forbid = 'no'
	      ORDER BY a.id DESC LIMIT #{firstIndex}, #{maxAmount}
    </select>

    <select id="getTotalAmountOfArticle" resultType="int">
        SELECT COUNT(a.id)
	      FROM mb_article a
	      WHERE a.forbid = 'no'
    </select>

    <insert id="insertLikeFlagOfArticle" useGeneratedKeys="true" keyProperty="id">
        <if test="#{userId}==null">
            insert into MB_LikeRecordOfArticle(articleId) values (#{articleId})
        </if>
        <if test="#{userId}!=null">
            insert into MB_LikeRecordOfArticle(articleId, userId) values (#{articleId}, #{userId})
        </if>
    </insert>

</mapper>
